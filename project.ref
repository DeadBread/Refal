	entry go
	extrn prout
	extrn add, sub, p1
	extrn numb, card, opnget, libget, clsget
	extrn functab, ftochar, chartof, printm
	extrn br, dg, cp, dgall

	empty begin, end, procedure, function, type, fullend, while

go = <opnget 'file.txt'> <prout <program <getFile () <libget>>>> <clsget> 

getFile 
	(e1) v2 = <getFile(e1 v2 '\n') <libget>>
	(e1) = <deleter e1>
	
	
	
	
	
deleter
	e1 '\n' e2 = <deleter e1 ' ' e2>
	e1 ' ' ' ' e2 = <deleter e1 ' ' e2>
	e1 = <begEnd e1>
	
	
	
	
	
begEnd
	e1 'end;' e2 = <begEnd <pairEnd e1 'end;'> e2>
	e1 = <begRepeat e1>
	
pairEnd
	R e1 'begin ' e2 'end;' = e1 ( e2 )
	e1 = <prout 'error end!' e1>
	
begRepeat
	e1 'until ' e2 ';' e3 = <begRepeat <pairUntil e1 'until '> e2 ';' e3>
	e1 = <begCase e1>
	
pairUntil
	R e1 'repeat ' e2 'until ' e3 = e1 'rpt;' ( e2 ) 'untl ' e3
	e1 = <prout 'error repeat!' e1>
	
begCase
	e1 'endcase;' e2 = <begCase <pairCase e1 'endcs;' > e2 >
	e1 = <printm e1> <prout '\n\n\n'>
	
pairCase
	R e1 'case ' e2 'of ' e3 'endcs;' =  e1 'cs ' e2 'of' ( e3 ) 'endcs;'
	
	
	
	
	
program
	'program ' e1 ';' e2 = 'int main() { \n'<const e2>
	e1 = <error>
	
	
	
	
	
const 
	e(' ')9 'const ' e1 '=' e2 ';' e3 = 'const ' <typeConst e2> ' ' e1 '='e2 <br 'const'<typeConst e2> <unspace e1> '=' <unspace e2>> ';\n' <const /0/ e3>
	/0/ e(' ')9 'var' e1 = <var 'var' e1>
	/0/ e1 '=' e2 ';' e3 = 'const ' <typeConst e2> ' ' e1 '=' e2 <br 'const'<typeConst e2> <unspace e1> '=' <unspace e2>> ';\n' <const /0/ e3>
	e1 = <var e1>
	
typeConst
	/0/ v(D)1 = 'int'
	/0/ v(D)1 '.' v(D)2 = 'double'
	/0/ '"' v1 '"' = 'char*'
	/0/ e1 = <prout 'constTypeError "' e1 '"'>
	e1 = <typeConst /0/ <unspace e1>>
	




	
var
	e(' ')9 'var ' e1 ';' e2 = <section e1> <var e2>
	e(' ')9 'begin ' e2 = <body 'begin ' e2>
	e(' ')9 e1 '; ' e2 = <section e1> <var e2>
	e1 = <prout 'var error!'>
	
section
	e1 ',' e2 ':' e3 = <variable (e3) e1> <section e2 ' : ' e3>
	e1 ':' e2 = <variable (e2) e1>
	e1 = <prout 'section error!' e1>
	
variable 
	(e1) e2 = <br 'var' <unspace e2>'='<reNameType <unspace e1>>> <reNameType <unspace e1>> ' ' e2 ';\n'
	
	
	
	

body
	'begin ' e1 'end.' e(' ')9 = <processBody e1> '};\n'
	e1 = <prout 'body error!' e1 '\n\n\n'>
	
processBody 
	e(' ')9 'cs ' e2 'of' ( e3 ) 'endcs;' e4 = <switch (e2) e3> <processBody e4>
	( v9 ) e2 = '{\n' <processBody v9> '}\n' <processBody e2>
	e(' ')9 'for ' e1 'do ' e2 = <operator 'for ' e1 'do ' > <processBody e2>
	e1 ';' e(' ')9 e2 = <operator <unspace e1>> <processBody e2>
	e1 = e1
	
	
	
	
	
switch
	(e2) e3 = 'switch(' e2 ')\n{\n' <switchList e3 (<cp 'var'<unspace e2>>)> '}\n'
	
switchList
	e1 ' : ' ( e2 ) sa e3 (e4) = 'case ' <eql e1 (e4)> ': { \n    ' <processBody e2> '}\n' <switchList e3 (e4)>
	e1 ' : ' e2 ';' e3 (e4) = 'case ' <eql e1 (e4)> ' : ' <processBody e2 ';\n'> <switchList e3 (e4)>
	e1 (e4) = e1
	
	
	
	
eq
	/0/ e1 (e1) = 
	/0/ e1 (e2) = <printm '\n\nError! Const type mismatch\n\n'>
	e1 (e2) = <eq /0/ <unspace e1> (<unspace e2>)>
	e1 = <prout e1 '!!!'>	

eql
	e1 (e2) = e1 <eq <typeConst e1> (e2)>
	
	


operator 
	'for ' e1 ':=' e2 'downto ' e3 'do ' = <for <unspace e1> (<unspace e2>) <unspace e3>>
	'for ' e1 ':=' e2 'to ' e3 'do ' = <for ( <unspace e1> ) <unspace e2> (<unspace e3>)>
	e1 ':=' e2 = <assignment ( <unspace e1> ) <unspace e2>> ';\n'
	e(' ')9 'writeln' e(' ')8 '(' e1 ')' = <print <list <unspace e1>>> ';\n'
	'rpt' = 'do'
	'untl ' e1 = 'while ( !' e1 ');\n'
	
	e1 = <prout '!!!' e1 '!!!' '\n'>
	
for
	(e1) e2 (e3) = 'for('<name e1> ' = ' <expression e2> '; ' e1 ' < ' <expression e3> '; ' e1 '++)\n    '
	e1 (e2) e3 = 'for('<name e1> ' = ' <expression e2> '; ' e1 ' > ' <expression e3> '; ' e1 '--)\n    '
	
name 
	e1 = <checkName (<cp 'var' e1>) e1>
	
assignment
	(e1) e2 = e1 ' = ' <expression e2>
	e1 = <prout 'expression error'>

expression
	e1 ' = ' e2 = <simpleExpr e1> ' == ' <simpleExpr e2>
	e1 sa(' ><= ') e2 = <simpleExpr e1> ' ' sa ' ' <simpleExpr e2>
	e1  sa(' >< ')sb(' ><= ') e2 = <simpleExpr e1> ' ' sa sb ' ' <simpleExpr e2>
	e1 = <simpleExpr e1>
	
simpleExpr
	e1 ' + ' e2 = <summand e1> ' + ' <simpleExpr e2>
	e1 ' - ' e2 = <summand e1> ' - ' <simpleExpr e2>
	e1 = <summand e1>
	
summand
	e1 ' * ' e2 = <factor e1> ' * ' <summand e2>
	e1 ' div ' e2 = <factor e1> ' / ' <summand e2>
	e1 ' mod ' e2 = <factor e1> ' % ' <summand e2>
	e1 ' and ' e2 = <factor e1> ' && ' <summand e2>
	e1 = <factor e1>
	
factor 
	v(D)1 = v1
	e(' ')0 v(D)1 = v1
	e1 = <nameOrConst e1>
	
nameOrConst
	e(' ')0 v(D)1 e(' ')9 = v1
	e1 = <checkName (<cp 'var' e1>) e1>
	
checkName
	(v1) e2 = e2
	() e1 = <prout 'name error!' '"'e1'"'>
	
	
list
	e1 ', ' e2 = <typed e1> ', ' <list e2>
	e1 = <typed e1>
	
typed 
	e1 = e1
	
print
	e1 = 'printf("' <printTypesList e1> '"' <printVarList e1> ')'
	
printTypesList
	e1 ', ' e2 = <what e1> ', ' <printTypesList e2>
	e1 =  <what e1>
	
what 
	v(D)1 = v1
	'"' v1 '"' = v1 
	e1 = <typeID<notEmpty <cp 'var'e1>>>
	
notEmpty
	v1 = v1
	= <error>
	
printVarList
	R e1 ', ' e2 = <printVarList e1> <isVar e2> 
	e1 = <isVar e1>
	
isVar
	v(D)1 =
	'"' v1 '"' =
	''' v1 ''' =
	v1 = ',' v1
	e1 = e1
	
	
typeID
	'int' = '%d'
	'double' = '%f'
	'float' = '%f'
	'char' = '%c'
	
reNameType 
	' ' e1 = <reNameType e1>
	'integer' = 'int'
	'boolean' = 'bool'
	'char' = 'char'
	'shortint' = 'short'
	'longint' = 'long'
	'real' = 'float'
	'single' = 'float'
	'double' = 'double'
	e1 = <prout 'type error' e1>
	
unspace
	' ' e1 = <unspace e1>
	e1 ' ' = <unspace e1>
	e1 = e1

error
	= <prout 'error'>


	
	
	
	
	
	
	
	
	
	
	
	

	
