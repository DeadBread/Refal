	entry go
	extrn prout
	extrn add, sub, p1
	extrn numb, card, opnget, libget, clsget
	extrn functab, ftochar, chartof, printm
	extrn br, dg, cp, dgall

	empty begin, end, procedure, function, type, fullend, while

go = <opnget 'file.txt'> <prout <program <getFile () <libget>>>> <clsget> 

getFile 
	(e1) v2 = <getFile(e1 v2 '\n') <libget>>
	(e1) = <deleter e1>
	
deleter
	e1 ' ' e2 = <deleter e1 e2>
	e1 '\n' e2 = <deleter e1 e2>
	e1 = <begEnd e1 /0/>
	
begEnd
	e1 'end;' e2 s(N)a = <begEnd <pairEnd e1 'end;' sa> e2 <p1 sa>>
	e1 s(N)a = e1
	
pairEnd
	R e1 'begin' e2 'end;' s(N)a = e1 '{' sa e2 '}' sa
	e1 = <prout 'error end!' e1>
	
program
	'program' e1 ';' e2 = 'int main() { \n'<const e2>
	e1 = <error>
	
const 
	'const' e1 '=' e2 ';' e3 = e1 ' = ' e2 <dg e1> <const /0/ e3>
	/0/ e1 '=' e2 ';' e3 = <transformConst (e1) e2> <const /0/ e3>
	/0/ e1 = <var e1>
	e1 = <var e1>
	
transformConst 
	(e1) e2 = e1 ' = ' e2
	
var
	'var' e1 ';' e2 = <section e1> <var e2>
	'begin' e2 = <body 'begin' e2>
	e1 ';' e2 = <section e1> <var e2>
	e1 = <prout 'var error!'>
	
section
	e1 ',' e2 ':' e3 = <variable (e3) e1> <section e2 ':' e3>
	e1 ':' e2 = <variable (e2) e1>
	e1 = <prout 'section error!' e1>
	
variable 
	(e1) e2 = <br 'var'e2'='<reNameType e1>> <reNameType e1> ' ' e2 ';\n'
	
body
	'begin' e1 'end.' = <processBody e1> '};\n'
	e1 = <prout 'body error!' e1 '\n\n\n'>
	
processBody 
	e1 '{' s(N)a v9 '}' sa e2 = <processBody e1> '{\n' <processBody v9> '}\n' <processBody e2>
	e1 ';' e2 = <operator e1> <processBody e2>
	e1 = e1
	
operator 
	e1 ':=' e2 = <assignment (e1) e2> ';\n'
	'writeln(' e1 ')' = <print <list e1>> ';\n'
	
	
	
	
	
assignment
	(e1) e2 = e1 ' = ' <expression e2>
	e1 = <prout 'expression error'>

expression
	e1 '=' e2 = <simpleExpr e1> ' == ' <simpleExpr e2>
	e1 sa('><=') e2 = <simpleExpr e1> ' ' sa ' ' <simpleExpr e2>
	e1  sa('><')sb('><=') e2 = <simpleExpr e1> ' ' sa sb ' ' <simpleExpr e2>
	e1 = <simpleExpr e1>
	
simpleExpr
	e1 ' + ' e2 = <summand e1> ' + ' <simpleExpr e2>
	e1 = <summand e1>
	
summand
	e1 '*' e2 = <factor e1> ' * ' <summand e2>
	e1 'div' e2 = <factor e1> ' / ' <summand e2>
	e1 'mod' e2 = <factor e1> ' % ' <summand e2>
	e1 'and' e2 = <factor e1> ' && ' <summand e2>
	e1 = <factor e1>
	
factor 
	v(D)1 = v1
	e1 = <name e1>
	
name 
	e1 = e1
	
list 
	e1 ',' e2 = <typed e1> ',' <list e2>
	e1 = <typed e1>
	
typed 
	e1 = e1
	
print
	e1 = 'printf("' <printTypesList e1> '"' <printVarList e1> ')'
	
printTypesList
	e1 ',' e2 = <what e1> ', ' <printTypesList e2>
	e1 = <what e1>
	
what 
	v(D)1 = v1
	'"' v1 '"' = v1 
	e1 = <typeID<notEmpty <cp 'var'e1>>>
	
notEmpty
	v1 = v1
	= <error>
	
printVarList
	R e1 ',' e2 = <printVarList e1> <isVar e2> 
	e1 = <isVar e1>
	
isVar
	v(D)1=
	'"' v1 '"' =
	''' v1 ''' =
	v1 = ',' v1
	e1 = e1
	
	
typeID
	'int' = '%d'
	'double' = '%f'
	'float' = '%f'
	'char' = '%c'
	
reNameType 
	'integer' = 'int'
	'boolean' = 'bool'
	'char' = 'char'
	'shortint' = 'short'
	'longint' = 'long'
	'real' = 'float'
	'single' = 'float'
	'double' = 'double'
	e1 = <prout 'type error' e1>
	
error
	= <prout 'error'>


	
	
	
	
	
	
	
	
	
	
	
	

	
